generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  PENDING
  APPROVED
  REJECTED
}

enum userStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  superAdmin
  superPrinter
  stationAdmin
  stationRegistrar
  stationPrinter
  developer
}

model user {
  id          String     @id @default(uuid())
  username    String     @unique
  phone       String     @unique
  password    String
  role        String
  stationUser station?   @relation(fields: [stationId], references: [id])
  stationId   String?
  status      userStatus @default(INACTIVE)
  isAdmin     Boolean    @default(false)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Uncomment and adjust the relation below if you have a Station model

  // Orders where this user is the registrar
  registrarOrders order[] @relation("OrderRegistrar")

  // Orders where this user is the printer
  printerOrders order[] @relation("OrderPrinter")
}

model station {
  id               String   @id @default(uuid())
  code             String   @unique
  afanOromoName    String
  amharicName      String
  stationAdminName String
  stampPhoto       String?
  signPhoto        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Uncomment the following if you want a relation from user to station
  users   user[]
  order   order[]
  citizen citizen[]
}

model citizen {
  id               String   @id @default(uuid())
  registralNo      String   @unique
  profilePhoto     String?
  stationCitizen   station  @relation(fields: [stationId], references: [id])
  stationId        String
  firstName        String
  middleName       String
  lastName         String
  gender           String
  placeOfBirth     String
  dateOfBirth      DateTime
  occupation       String
  phone            String
  emergencyContact String
  relationship     String
  emergencyPhone   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  order            order[]
}

model order {
  id               String    @id @default(uuid())
  orderNumber      String    @unique
  citizenId        String
  orderType        String
  orderStatus      String
  paymentMethod    String
  paymentReference String
  paymentProof     String?
  amount           Int
  stationId        String
  registrarId      String
  printerId        String
  createdAt        DateTime  @default(now())
  paidAt           DateTime?
  completedAt      DateTime?

  // Relations

  station   station @relation(fields: [stationId], references: [id])
  registrar user    @relation("OrderRegistrar", fields: [registrarId], references: [id])
  printer   user    @relation("OrderPrinter", fields: [printerId], references: [id])
  citizen   citizen @relation(fields: [citizenId], references: [id])
}
